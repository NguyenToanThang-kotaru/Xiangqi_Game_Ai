import requests
import sys
import os
import mysql.connector
import time  

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

from database.db_manager import connect_db
from game.board import Board
from tkinter import Tk, Canvas
total_count = 0
# T·∫°o root nh∆∞ng kh√¥ng hi·ªÉn th·ªã c·ª≠a s·ªï

conn = connect_db()
cursor = conn.cursor()

def is_data_existing(fen, move):
    """Ki·ªÉm tra xem FEN v√† n∆∞·ªõc ƒëi ƒë√£ t·ªìn t·∫°i trong database ch∆∞a"""
    cursor.execute("SELECT COUNT(*) FROM ai_training_data WHERE fen = %s AND move = %s", (fen, move))
    exists = cursor.fetchone()[0] > 0
    if exists:
        print(f"‚ö†Ô∏è B·ªè qua: {fen} ‚Üí {move} ƒë√£ c√≥ trong DB.")
    return exists

def fetch_and_store_moves(fen_string, max_retries=5):
    """G·ªçi API, ki·ªÉm tra v√† l∆∞u d·ªØ li·ªáu m·ªõi v√†o database"""
    import requests, time

    url = f"https://chessdb.cn/chessdb.php?action=queryall&board={fen_string}"

    for attempt in range(max_retries):
        try:
            response = requests.get(url, timeout=10)
            if "checkmate" in response.text.lower():
                print(f"üö® Checkmate! Kh√¥ng l∆∞u FEN: {fen_string}")
                return []

            if response.status_code != 200 or not response.text.strip():
                print(f"‚ùå API l·ªói, th·ª≠ l·∫°i ({attempt + 1}/{max_retries})...")
                time.sleep(2)
                continue

            moves_data = response.text.strip().split("|")
            new_moves = []

            for move_str in moves_data:
                parts = move_str.split(",")
                move = None
                winrate = 50.0  # gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y

                for part in parts:
                    if part.startswith("move:"):
                        move = part.split(":", 1)[1]
                    elif part.startswith("winrate:"):
                        try:
                            winrate = float(part.split(":", 1)[1].replace("\x00", "").strip())
                        except ValueError:
                            print(f"‚ùå L·ªói parsing winrate: {part}. S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.")
                            winrate = 50.0  # fallback n·∫øu l·ªói parsing

                if move:  # ch·ªâ l∆∞u n·∫øu c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá
                    new_moves.append({"move": move, "winrate": winrate})

            return new_moves

        except requests.exceptions.RequestException as e:
            print(f"üö® L·ªói k·∫øt n·ªëi API: {e}. Th·ª≠ l·∫°i ({attempt + 1}/{max_retries})...")
            time.sleep(2)

    print("‚ùå L·ªói API li√™n t·ª•c, b·ªè qua tr·∫°ng th√°i n√†y.")
    return []



def update_fen(board,fen, move):
    """C·∫≠p nh·∫≠t FEN d·ª±a tr√™n n∆∞·ªõc ƒëi, ƒë·ªïi l∆∞·ª£t ƒëi"""
    board.set_fen(fen)  
    board.apply_move(move)  
    new_fen = board.to_fen()  
    return new_fen  

def crawl_data(start_fen, max_depth=3, request_delay=1.0, batch_size=1000):
    stack = [(start_fen, 0)]  # Kh·ªüi t·∫°o v·ªõi FEN ban ƒë·∫ßu
    visited = set()
    root = Tk()
    root.withdraw()  
    fake_canvas = Canvas(root, width=1, height=1)
    fake_canvas.pack()

    tempboard = Board(fake_canvas, "")  # Kh·ªüi t·∫°o b√†n c·ªù
    insert_batch = []  # Danh s√°ch ch·ª©a c√°c b·∫£n ghi c·∫ßn insert
    red_moves_count = 0  # ƒê·∫øm s·ªë l∆∞·ª£t ƒëi c·ªßa qu√¢n ƒë·ªè

    while stack:
        print(f"üîç Stack hi·ªán t·∫°i: {stack}")
        current_fen, level = stack.pop(0)  # FIFO

        if level > max_depth :
            print(f"‚ö†Ô∏è ƒê√£ d·ª´ng t·∫°i FEN: {current_fen}, level: {level}")
            continue  # B·ªè qua n·∫øu ƒë√£ duy·ªát ho·∫∑c v∆∞·ª£t qu√° ƒë·ªô s√¢u

        # G·ªçi API l·∫•y danh s√°ch n∆∞·ªõc ƒëi t·ª´ current_fen
        new_moves = fetch_and_store_moves(current_fen)
        time.sleep(request_delay)

        if not new_moves:
            print(f"‚ùå Kh√¥ng c√≥ n∆∞·ªõc ƒëi t·ª´ FEN: {current_fen}")
            continue  # N·∫øu kh√¥ng c√≥ n∆∞·ªõc ƒëi m·ªõi, b·ªè qua

        print(f"üîç N∆∞·ªõc ƒëi t·ª´ FEN {current_fen}: {new_moves}")
        
        for move_data in new_moves:
            move = move_data["move"]
            winrate = move_data["winrate"]
            if winrate > 40:  # Ch·ªâ l∆∞u n·∫øu winrate h·ª£p l√Ω
                # L∆∞u n∆∞·ªõc ƒëi v√†o database
                if not is_data_existing(current_fen, move):
                    insert_batch.append((current_fen, move, winrate))
                    print(f"‚úÖ L∆∞u th√†nh c√¥ng: {current_fen} -> {move} v·ªõi winrate {winrate}")
                
                if winrate > 60:
                    insert_batch.append((current_fen, move, winrate))
                    print(f"‚úÖ L∆∞u th√†nh c√¥ng: {current_fen} -> {move} v·ªõi winrate {winrate} X2 ƒë√£ tr√πng l·∫°i")      

                # T·∫°o FEN m·ªõi sau khi th·ª±c hi·ªán move ‚Üí ƒë·ªÉ ti·∫øp t·ª•c crawl
                new_fen = update_fen(tempboard, current_fen, move)
                print(f"‚ôªÔ∏è C·∫≠p nh·∫≠t FEN m·ªõi: {new_fen}")

                # Ki·ªÉm tra xem FEN ƒë√£ duy·ªát ch∆∞a
                if new_fen not in visited:
                    print(f"üîç Th√™m FEN m·ªõi v√†o stack: {new_fen}")
                    stack.insert(0, (new_fen, level + 1))  # Th√™m FEN m·ªõi v√†o stack
                    visited.add(new_fen)

        # Commit n·∫øu batch ƒë√£ ƒë·ªß l·ªõn
        if len(insert_batch) >= batch_size:
            cursor.executemany("""
                INSERT INTO ai_training_data (fen, move, winrate)
                VALUES (%s, %s, %s)
            """, insert_batch)
            conn.commit()  # Commit v√†o c∆° s·ªü d·ªØ li·ªáu
            print(f"‚úÖ ƒê√£ commit {len(insert_batch)} b·∫£n ghi v√†o c∆° s·ªü d·ªØ li·ªáu.")
            insert_batch = []  # Reset danh s√°ch sau khi commit

    root.destroy()  # ƒê√≥ng c·ª≠a s·ªï Tkinter sau khi ho√†n th√†nh

    # Commit n·∫øu c√≤n d·ªØ li·ªáu trong batch khi v√≤ng l·∫∑p k·∫øt th√∫c
    if insert_batch:
        cursor.executemany("""
            INSERT INTO ai_training_data (fen, move, winrate)
            VALUES (%s, %s, %s)
        """, insert_batch)
        conn.commit()
        print(f"‚úÖ ƒê√£ commit {len(insert_batch)} b·∫£n ghi v√†o c∆° s·ªü d·ªØ li·ªáu.")


# def crawl_data(start_fen, max_depth=3, request_delay=1.0):
#     stack = [(start_fen, 0)]
#     visited = set()
#     root = Tk()
#     root.withdraw()  
#     fake_canvas = Canvas(root, width=1, height=1)
#     fake_canvas.pack()

#     tempboard = Board(fake_canvas,"")  # Kh·ªüi t·∫°o b√†n c·ªù
#     while stack:
#         current_fen, level = stack.pop(0)

#         if level > max_depth or current_fen in visited:
#             continue
#         visited.add(current_fen)

#         # G·ªçi API l·∫•y danh s√°ch n∆∞·ªõc ƒëi t·ª´ current_fen
#         new_moves = fetch_and_store_moves(current_fen)
#         time.sleep(request_delay)

#         if not new_moves:
#             continue

#         for move_data in new_moves:
#             move = move_data["move"]
#             winrate = move_data["winrate"]
#             if(winrate > 40):                                    
#                 # ‚úÖ L∆∞u l·∫°i ƒë√∫ng: n∆∞·ªõc ƒëi xu·∫•t ph√°t t·ª´ current_fen
#                 if not is_data_existing(current_fen, move):
#                     cursor.execute("""
#                         INSERT INTO ai_training_data (fen, move, winrate)
#                         VALUES (%s, %s, %s)
#                     """, (current_fen, move, winrate))
#                     conn.commit()
#                     print(f"‚úÖ L∆∞u th√†nh c√¥ng: {current_fen} -> {move} v·ªõi winrate {winrate}")
#                 if winrate > 60:
#                     cursor.execute("""
#                         INSERT INTO ai_training_data (fen, move, winrate)
#                         VALUES (%s, %s, %s)
#                     """, (current_fen, move, winrate))
#                     conn.commit()       
#                     print(f"‚úÖ L∆∞u th√†nh c√¥ng: {current_fen} -> {move} v·ªõi winrate {winrate} X2 ƒë√£ tr√πng l·∫°i")      

#                 # ‚úÖ T·∫°o FEN m·ªõi sau khi th·ª±c hi·ªán move ‚Üí ƒë·ªÉ ti·∫øp t·ª•c crawl
#                 new_fen = update_fen(tempboard,current_fen, move)
#                 print(f"‚ôªÔ∏è C·∫≠p nh·∫≠t FEN m·ªõi: {new_fen}")
#                 stack.append((new_fen, level + 1))


initial_fen = "rnbakabnr/9/1c5c1/p1p1p1p1p/9/9/P1P1P1P1P/1C5C1/9/RNBAKABNR w"
crawl_data(initial_fen, max_depth=3)

cursor.close()
conn.close()